name: (4) Publish Release
on:
  workflow_call:
    inputs:
      RELEASE_VERSION:
        required: true
        type: string

env:
  OPERATOR_NAME: "hazelcast-platform-operator"
  AGENT_NAME: "platform-operator-agent"
  RELEASE_VERSION: ${{ inputs.RELEASE_VERSION }}
  PUBLISH_TIMEOUT_IN_MINS: "60"
  GRADE_CHECK_TIMEOUT_IN_MINS: "20"
  AWS_REGION: us-east-1
  CHANNELS: alpha
  DEFAULT_CHANNEL: alpha
  OPERATOR_REGISTRY_IMAGE: hazelcast/hazelcast-platform-operator
  AGENT_REGISTRY_IMAGE: hazelcast/platform-operator-agent

jobs:
  build_docker_image:
    name: Build Release Image
    runs-on: ubicloud-standard-2
    strategy:
      fail-fast: false
      matrix:
        image: [ "operator", "agent" ]
        arch: [ "arm64", "amd64", "s390x", "ppc64le" ]
    outputs:
      RELEASE_VERSION: ${{ steps.set-outputs.outputs.RELEASE_VERSION }}
      OPERATOR_IMG_NAME: ${{ steps.set-outputs.outputs.OPERATOR_IMG_NAME }}
      AGENT_IMG_NAME: ${{ steps.set-outputs.outputs.AGENT_IMG_NAME }}
      BUNDLE_RELEASE_VERSION: ${{ steps.set-outputs.outputs.BUNDLE_RELEASE_VERSION }}
      OPERATOR_AMD64_DIGEST: ${{ steps.digest.outputs.OPERATOR_AMD64_DIGEST }}
      AGENT_AMD64_DIGEST: ${{ steps.digest.outputs.AGENT_AMD64_DIGEST }}
      OPERATOR_ARM64_DIGEST: ${{ steps.digest.outputs.OPERATOR_ARM64_DIGEST }}
      AGENT_ARM64_DIGEST: ${{ steps.digest.outputs.AGENT_ARM64_DIGEST }}
      OPERATOR_S390X_DIGEST: ${{ steps.digest.outputs.OPERATOR_S390X_DIGEST }}
      AGENT_S390X_DIGEST: ${{ steps.digest.outputs.AGENT_S390X_DIGEST }}
      OPERATOR_PPC64LE_DIGEST: ${{ steps.digest.outputs.OPERATOR_PPC64LE_DIGEST }}
      AGENT_PPC64LE_DIGEST: ${{ steps.digest.outputs.AGENT_PPC64LE_DIGEST }}
      CURRENT_OPERATOR_LATEST_TAG: ${{ steps.get-current-latest-tag.outputs.CURRENT_OPERATOR_LATEST_TAG }}
      CURRENT_AGENT_LATEST_TAG: ${{ steps.get-current-latest-tag.outputs.CURRENT_AGENT_LATEST_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker Setup QEMU
        uses: docker/setup-qemu-action@v3.2.0

      - name: Set Up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.6.1
        with:
          install: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            DOCKERHUB_USERNAME,CN/DOCKERHUB_USERNAME
            DOCKERHUB_PASSWORD,CN/DOCKERHUB_PASSWORD
            DEVOPS_GITHUB_TOKEN,CN/DEVOPS_GITHUB_TOKEN

      - name: Set Release Version
        id: set-outputs
        run: |
          OPERATOR_IMG_NAME=docker.io/${{ env.OPERATOR_REGISTRY_IMAGE }}:${RELEASE_VERSION}
          AGENT_IMG_NAME=docker.io/${{ env.AGENT_REGISTRY_IMAGE }}:${RELEASE_VERSION}
          BUNDLE_RELEASE_VERSION=$( make print-bundle-version VERSION=${RELEASE_VERSION} )
          echo "BUNDLE_RELEASE_VERSION=${BUNDLE_RELEASE_VERSION}" >> $GITHUB_ENV
          echo "BUNDLE_RELEASE_VERSION=${BUNDLE_RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "OPERATOR_IMG_NAME=${OPERATOR_IMG_NAME}" >> $GITHUB_ENV
          echo "OPERATOR_IMG_NAME=${OPERATOR_IMG_NAME}" >> $GITHUB_OUTPUT
          echo "AGENT_IMG_NAME=${AGENT_IMG_NAME}" >> $GITHUB_ENV
          echo "AGENT_IMG_NAME=${AGENT_IMG_NAME}" >> $GITHUB_OUTPUT

      - name: Get the Current Operator and Agent Latest Tag
        id: get-current-latest-tag
        run: |
          CURRENT_OPERATOR_LATEST_TAG=$(curl -s "https://hub.docker.com/v2/repositories/${{ env.OPERATOR_REGISTRY_IMAGE }}/tags/?page_size=100" \
          | jq -r '[.results[] | select(.name | test("\\d+\\.\\d+\\.\\d+")) | {name, last_updated}] | sort_by(.last_updated) | last.name')
          echo "CURRENT_OPERATOR_LATEST_TAG=${CURRENT_OPERATOR_LATEST_TAG}" >> $GITHUB_ENV
          echo "CURRENT_OPERATOR_LATEST_TAG=${CURRENT_OPERATOR_LATEST_TAG}" >> $GITHUB_OUTPUT
          
          CURRENT_AGENT_LATEST_TAG=$(curl -s "https://hub.docker.com/v2/repositories/${{ env.AGENT_REGISTRY_IMAGE }}/tags/?page_size=100" \
          | jq -r '[.results[] | select(.name | test("\\d+\\.\\d+\\.\\d+")) | {name, last_updated}] | sort_by(.last_updated) | last.name')
          echo "CURRENT_AGENT_LATEST_TAG=${CURRENT_AGENT_LATEST_TAG}" >> $GITHUB_ENV
          echo "CURRENT_AGENT_LATEST_TAG=${CURRENT_AGENT_LATEST_TAG}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}

      - name: Build Operator Image
        if: matrix.image == 'operator'
        uses: docker/build-push-action@v6.7.0
        id: build_operator
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            version=${{ inputs.RELEASE_VERSION }}
            pardotID=dockerhub
          file: Dockerfile
          platforms: linux/${{ matrix.arch }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          outputs: type=image,name=${{ env.OPERATOR_REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          labels: |
            operator.image.revision=${{github.sha}}

      - name: Build Agent Image
        if: matrix.image == 'agent'
        uses: docker/build-push-action@v6.7.0
        id: build_agent
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: agent/Dockerfile
          platforms: linux/${{ matrix.arch }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          outputs: type=image,name=${{ env.AGENT_REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          labels: |
            agent.image.revision=${{ github.sha }}

      - name: Save Digest
        id: digest
        run: |
          if [[ "${{ matrix.arch }}" == "amd64" && "${{ matrix.image }}" == "operator" ]]; then
            echo "OPERATOR_AMD64_DIGEST=${{ steps.build_operator.outputs.digest }}" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.arch }}" == "amd64" && "${{ matrix.image }}" == "agent" ]]; then
            echo "AGENT_AMD64_DIGEST=${{ steps.build_agent.outputs.digest }}" >> $GITHUB_OUTPUT
          
          elif [[ "${{ matrix.arch }}" == "arm64" && "${{ matrix.image }}" == "operator" ]]; then
            echo "OPERATOR_ARM64_DIGEST=${{ steps.build_operator.outputs.digest }}" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.arch }}" == "arm64" && "${{ matrix.image }}" == "agent" ]]; then
            echo "AGENT_ARM64_DIGEST=${{ steps.build_agent.outputs.digest }}" >> $GITHUB_OUTPUT
          
          elif [[ "${{ matrix.arch }}" == "s390x" && "${{ matrix.image }}" == "operator" ]]; then
            echo "OPERATOR_S390X_DIGEST=${{ steps.build_operator.outputs.digest }}" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.arch }}" == "s390x" && "${{ matrix.image }}" == "agent" ]]; then
            echo "AGENT_S390X_DIGEST=${{ steps.build_agent.outputs.digest }}" >> $GITHUB_OUTPUT
          
          elif [[ "${{ matrix.arch }}" == "ppc64le" && "${{ matrix.image }}" == "operator" ]]; then
            echo "OPERATOR_PPC64LE_DIGEST=${{ steps.build_operator.outputs.digest }}" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.arch }}" == "ppc64le" && "${{ matrix.image }}" == "agent" ]]; then
            echo "AGENT_PPC64LE_DIGEST=${{ steps.build_agent.outputs.digest }}" >> $GITHUB_OUTPUT
          fi

  publish_images:
    name: Publish Release Image
    needs: build_docker_image
    runs-on: ubicloud-standard-2
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            DOCKERHUB_USERNAME,CN/DOCKERHUB_USERNAME
            DOCKERHUB_PASSWORD,CN/DOCKERHUB_PASSWORD

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}

      - name: Push Operator Image To Docker Hub
        uses: int128/docker-manifest-create-action@v2
        with:
          tags: |
            ${{ needs.build_docker_image.outputs.OPERATOR_IMG_NAME }}
            ${{ env.OPERATOR_REGISTRY_IMAGE }}:latest
          sources: |
            ${{ env.OPERATOR_REGISTRY_IMAGE }}@${{ needs.build_docker_image.outputs.OPERATOR_AMD64_DIGEST }}
            ${{ env.OPERATOR_REGISTRY_IMAGE }}@${{ needs.build_docker_image.outputs.OPERATOR_ARM64_DIGEST }}
            ${{ env.OPERATOR_REGISTRY_IMAGE }}@${{ needs.build_docker_image.outputs.OPERATOR_S390X_DIGEST }}
            ${{ env.OPERATOR_REGISTRY_IMAGE }}@${{ needs.build_docker_image.outputs.OPERATOR_PPC64LE_DIGEST }}

      - name: Push Agent Image To Docker Hub
        uses: int128/docker-manifest-create-action@v2
        with:
          tags: |
            ${{ needs.build_docker_image.outputs.AGENT_IMG_NAME }}
            ${{ env.AGENT_REGISTRY_IMAGE }}:latest
          sources: |
            ${{ env.AGENT_REGISTRY_IMAGE }}@${{ needs.build_docker_image.outputs.AGENT_AMD64_DIGEST }}
            ${{ env.AGENT_REGISTRY_IMAGE }}@${{ needs.build_docker_image.outputs.AGENT_ARM64_DIGEST }}
            ${{ env.AGENT_REGISTRY_IMAGE }}@${{ needs.build_docker_image.outputs.AGENT_S390X_DIGEST }}
            ${{ env.AGENT_REGISTRY_IMAGE }}@${{ needs.build_docker_image.outputs.AGENT_PPC64LE_DIGEST }}

  publish_image_to_redhat:
    name: Certify and Publish Container Image to Red Hat
    needs: ['publish_images', 'build_docker_image']
    defaults:
      run:
        shell: bash
    runs-on: ubicloud-standard-2
    env:
      OPERATOR_IMG_NAME: ${{ needs.build_docker_image.outputs.OPERATOR_IMG_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            DOCKERHUB_USERNAME,CN/DOCKERHUB_USERNAME
            DOCKERHUB_PASSWORD,CN/DOCKERHUB_PASSWORD
            PREFLIGHT_PROJECT_ID,CN/PREFLIGHT_PROJECT_ID
            PFLT_PYXIS_API_TOKEN,CN/PREFLIGHT_RHEL_API_KEY

      - name: Setup Preflight
        id: setup-tools
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          preflight: "latest"
          source: github
          skip_cache: true

      - name: Test and Submit Container Results to Red Hat
        run: |
          echo "Submit test container results to Red Hat"
          podman login -u ${{ env.DOCKERHUB_USERNAME }} -p ${{ env.DOCKERHUB_PASSWORD }} index.docker.io --authfile /home/runner/.docker/config.json

          preflight check container index.$OPERATOR_IMG_NAME \
          --submit \
          --docker-config=/home/runner/.docker/config.json \
          --certification-project-id="$PREFLIGHT_PROJECT_ID" \
          --pyxis-api-token="$PFLT_PYXIS_API_TOKEN"

      - name: Publish the Hazelcast-Platform-Operator Image
        run: |
          source .github/scripts/utils.sh
          checking_image_grade "$PREFLIGHT_PROJECT_ID" "$RELEASE_VERSION" "$PFLT_PYXIS_API_TOKEN" "$GRADE_CHECK_TIMEOUT_IN_MINS"
          wait_for_container_publish "$PREFLIGHT_PROJECT_ID" "$RELEASE_VERSION" "$PFLT_PYXIS_API_TOKEN" "$PUBLISH_TIMEOUT_IN_MINS"

  operator_bundle_release:
    name: Create a PR in
    runs-on: ubicloud-standard-2
    needs: ['build_docker_image', 'publish_images', 'publish_image_to_redhat']
    strategy:
      fail-fast: false
      matrix:
        include:
          - repo-name: community-operators
            repo-owner: k8s-operatorhub

          - repo-name: certified-operators
            repo-owner: redhat-openshift-ecosystem
    env:
      REPO_NAME: ${{ matrix.repo-name }}
      REPO_OWNER: ${{ matrix.repo-owner }}
      RELEASE_VERSION: ${{ needs.build_docker_image.outputs.RELEASE_VERSION }}
      BUNDLE_RELEASE_VERSION: ${{ needs.build_docker_image.outputs.BUNDLE_RELEASE_VERSION }}
      OPERATOR_IMG_NAME: ${{ needs.build_docker_image.outputs.OPERATOR_IMG_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            DEVOPS_GITHUB_TOKEN,CN/DEVOPS_GITHUB_TOKEN

      - name: Build Red Hat Bundle
        run: |
          make bundle IMG=${OPERATOR_IMG_NAME} VERSION=${RELEASE_VERSION} DEFAULT_CHANNEL=${DEFAULT_CHANNEL} CHANNELS=${CHANNELS}

      - name: Validate Bundle for OCP
        run: |
          make bundle-ocp-validate

      - name: Checkout to devOpsHelm/${{ env.REPO_NAME }}
        uses: actions/checkout@v4
        with:
          repository: devOpsHelm/${{ env.REPO_NAME }}
          path: ${{ env.REPO_NAME }}
          token: ${{ env.DEVOPS_GITHUB_TOKEN }}

      - name: Update main branch of the fork
        working-directory: ${{ env.REPO_NAME }}
        run: |
          git checkout main
          git remote add upstream https://github.com/${REPO_OWNER}/${REPO_NAME}.git
          git pull upstream main
          git push origin main

      - name: Commit and push changes to bundle
        working-directory: ${{ env.REPO_NAME }}
        run: |
          git config user.email "devopshelm@hazelcast.com"
          git config user.name "devOpsHelm"
          BRANCH_NAME=${OPERATOR_NAME}-${BUNDLE_RELEASE_VERSION}-${{ github.run_id }}

          git checkout -b $BRANCH_NAME
          if [ "${{ env.REPO_NAME }}" == "certified-operators" ]; then
            sed -i "s|merge: *[^ ]*|merge: false|" operators/${OPERATOR_NAME}/ci.yaml
          fi
          mkdir -p operators/${OPERATOR_NAME}/${BUNDLE_RELEASE_VERSION}
          cp -r ../bundle/* operators/${OPERATOR_NAME}/${BUNDLE_RELEASE_VERSION}/

          git add  ./operators/${OPERATOR_NAME}
          git commit --signoff -m "Update ${OPERATOR_NAME} to ${BUNDLE_RELEASE_VERSION}"
          git push -u origin $BRANCH_NAME

      - name: Create PR
        working-directory: ${{ env.REPO_NAME }}
        run: |
          echo ${{ env.DEVOPS_GITHUB_TOKEN }} | gh auth login --with-token
          gh pr create --title \
          "operator ${OPERATOR_NAME} (${BUNDLE_RELEASE_VERSION})" --body "" --repo ${REPO_OWNER}/${REPO_NAME}
          if ! gh pr view ${{ github.event.pull_request.number }} &> /dev/null; then
              echo "Pull request ${{ github.event.pull_request.number }} not found, retrying in 10 seconds..."
              sleep 10
          fi
          if [ "${{ env.REPO_NAME }}" != "certified-operators" ]; then
            gh pr comment ${{ github.event.pull_request.number }} --body "/hold"
          fi

  helm_chart_release:
    name: Publish Helm Chart
    runs-on: ubicloud-standard-2
    needs: ['operator_bundle_release']
    outputs:
      REPLACED_VERSION: ${{ steps.helm_chart_version.outputs.REPLACED_VERSION }}
    steps:
      - name: Checkout 'Hazelcast Operator' Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            DEVOPS_GITHUB_TOKEN,CN/DEVOPS_GITHUB_TOKEN

      - name: Package operator chart and add it into index.yaml
        run: |
          helm package ./helm-charts/hazelcast-platform-operator
          helm package ./helm-charts/hazelcast-platform-operator/charts/hazelcast-platform-operator-crds
          aws s3 cp s3://hazelcast-charts/index.yaml .
          cp ./index.yaml ${{ runner.temp }}/index.yaml
          helm repo index --url=https://hazelcast-charts.s3.amazonaws.com --merge ./index.yaml .

      - name: Upload Backup of the Helm Chart Index
        uses: actions/upload-artifact@v3
        with:
          name: index.yaml
          path: ${{ runner.temp }}/index.yaml

      - name: Push operator chart and index.yaml to S3 bucket
        run: |
          for CHART_TGZ in *.tgz; do aws s3 cp ${CHART_TGZ} s3://hazelcast-charts; done
          aws s3 cp ./index.yaml s3://hazelcast-charts

      - name: Create Kind Config
        run: |
          cat <<EOT >> ./kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
          - role: worker
          - role: worker
          - role: worker
          EOT

      - name: Create Kind Cluster
        uses: helm/kind-action@v1.10.0
        with:
          config: ./kind-config.yaml
          cluster_name: kind

      - name: Install and Verify Hazelcast Operator Image Tag
        run: |
          LATEST_STABLE_VERSION=$(curl -s https://artifacthub.io/api/v1/packages/helm/hazelcast/hazelcast-platform-operator | jq -r '.available_versions | map(select(.version | contains("snapshot") | not)) | .[0].version')
          helm repo add hazelcast https://hazelcast-charts.s3.amazonaws.com && \
          helm repo update && \
          helm install operator hazelcast/hazelcast-platform-operator --version=$LATEST_STABLE_VERSION --set=installCRDs=true --set=phoneHomeEnabled=false --wait
          kubectl rollout status deployment.apps/operator-hazelcast-platform-operator
          kubectl wait pods -l app.kubernetes.io/name=hazelcast-platform-operator --for condition=Ready --timeout=180s
          INSTALLED_VERSION=$(kubectl get deployment operator-hazelcast-platform-operator -o=jsonpath="{.spec.template.spec.containers[*].image}" | awk -F ':' '{print $2}')
          if [[ ${LATEST_STABLE_VERSION} == ${INSTALLED_VERSION} ]]; then
            echo "The latest operator image is successfully installed."
          else
            echo "The latest operator image tag doesn't equal the installed image tag."
            exit 1
          fi

      - name: Update Chart Version in Main Branch
        id: helm_chart_version
        working-directory: helm-charts/hazelcast-platform-operator
        run: |
          REPLACED_VERSION=$(echo "$RELEASE_VERSION" | awk -F'.' '{print $1"."$2+1".0"}')
          echo "REPLACED_VERSION=${REPLACED_VERSION}" >> $GITHUB_ENV
          echo "REPLACED_VERSION=${REPLACED_VERSION}" >> $GITHUB_OUTPUT
          git fetch origin
          git checkout main
          git pull origin main
          yq -i ".version = \"${REPLACED_VERSION}-snapshot\" | .appVersion = \"${REPLACED_VERSION}-snapshot\"" charts/hazelcast-platform-operator-crds/Chart.yaml
          yq -i ".version = \"${REPLACED_VERSION}-snapshot\" | .appVersion = \"${REPLACED_VERSION}-snapshot\" | .dependencies[0].version = \"${REPLACED_VERSION}-snapshot\"" Chart.yaml

      - name: Commit and Push Changes
        working-directory: helm-charts/hazelcast-platform-operator
        run: |
          git config user.email "devopshelm@hazelcast.com"
          git config user.name "devOpsHelm"
          BRANCH_NAME=update-helm-chart-to-${REPLACED_VERSION}
          git checkout -b $BRANCH_NAME
          git add .
          git commit --signoff -m "$(echo -e "Update helm chart to ${REPLACED_VERSION} version")"
          git push -u origin $BRANCH_NAME

      - name: Create PR to Main Branch
        run: |
          echo ${{ env.DEVOPS_GITHUB_TOKEN }} | gh auth login --with-token
          gh pr create --title "Update Helm Chart Version to ${REPLACED_VERSION}-snapshot" \
          --label "non-release" \
          --milestone "${RELEASE_VERSION}" \
          --body ""

  validate_release:
    if: always()
    name: Approve/Reject release?
    needs: ['publish_images', 'publish_image_to_redhat', 'helm_chart_release']
    runs-on: ubicloud-standard-2
    environment: 'prod'
    steps:
      - run: ""

  merge_pr:
    name: Merge all PR's
    needs: validate_release
    if: always() && needs.validate_release.result == 'success'
    runs-on: ubicloud-standard-2
    strategy:
      fail-fast: false
      matrix:
        include:
          - repo-name: community-operators
            repo-owner: k8s-operatorhub

          - repo-name: certified-operators
            repo-owner: redhat-openshift-ecosystem

          - repo-name: hazelcast-platform-operator
            repo-owner: hazelcast
    env:
      REPO_NAME: ${{ matrix.repo-name }}
      REPO_OWNER: ${{ matrix.repo-owner }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            DEVOPS_GITHUB_TOKEN,CN/DEVOPS_GITHUB_TOKEN

      - name: Checkout to devOpsHelm/${{ env.REPO_NAME }}
        uses: actions/checkout@v4
        with:
          repository: devOpsHelm/${{ env.REPO_NAME }}
          path: ${{ env.REPO_NAME }}
          token: ${{ env.DEVOPS_GITHUB_TOKEN }}

      - name: Enable Auto-Merge For Bundle PR's
        if: always() && matrix.repo-name == 'certified-operators' || matrix.repo-name == 'community-operators'
        working-directory: ${{ env.REPO_NAME }}
        run: |
          echo ${{ env.DEVOPS_GITHUB_TOKEN }} | gh auth login --with-token
          git config user.email "devopshelm@hazelcast.com"
          git config user.name "devOpsHelm"
          BUNDLE_RELEASE_VERSION=$( make print-bundle-version VERSION=${RELEASE_VERSION} )
          BRANCH_NAME=${OPERATOR_NAME}-${BUNDLE_RELEASE_VERSION}-${{ github.run_id }}
          PR_NUMBER=$(gh pr list --repo ${{ env.REPO_OWNER }}/${{ env.REPO_NAME }} --search "operator ${{ env.OPERATOR_NAME }} (${BUNDLE_RELEASE_VERSION})" --json number | jq -r '.[].number')
          if [ "${{ env.REPO_NAME }}" == "certified-operators" ]; then
              git fetch --all
              git checkout --track origin/$BRANCH_NAME
              sed -i "s|merge: *[^ ]*|merge: true|" operators/${OPERATOR_NAME}/ci.yaml
              git add  ./operators/${OPERATOR_NAME}
              git commit --signoff -m "Update ${OPERATOR_NAME} to ${BUNDLE_RELEASE_VERSION}"
              git push -u origin $BRANCH_NAME
            else 
              gh pr comment $PR_NUMBER --body "/hold cancel"
            fi

      - name: Checkout to hazelcast/hazelcast-platform-operator
        if: always() && matrix.repo-name == 'hazelcast-platform-operator'
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}
          token: ${{ env.DEVOPS_GITHUB_TOKEN }}

      - name: Merge Helm Chart PR
        if: always() && matrix.repo-name == 'hazelcast-platform-operator'
        working-directory: ${{ env.REPO_NAME }}
        run: |
          echo ${{ env.DEVOPS_GITHUB_TOKEN }} | gh auth login --with-token
          REPLACED_VERSION=$(echo "$RELEASE_VERSION" | awk -F'.' '{print $1"."$2+1".0"}')
          HELM_CHART_PR_NUMBER=$(gh pr list --repo hazelcast/hazelcast-platform-operator --search "Update Helm Chart Version to ${REPLACED_VERSION}-snapshot" --json number | jq -r '.[].number')
          gh pr merge $HELM_CHART_PR_NUMBER --admin 

  revert_changes:
    name: Revert Release Changes
    needs: ['validate_release', 'build_docker_image', 'publish_images']
    if: always() && needs.validate_release.result == 'failure'
    runs-on: ubicloud-standard-2
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            DOCKERHUB_USERNAME,CN/DOCKERHUB_USERNAME
            DOCKERHUB_PASSWORD,CN/DOCKERHUB_PASSWORD
            DEVOPS_GITHUB_TOKEN,CN/DEVOPS_GITHUB_TOKEN
            PREFLIGHT_PROJECT_ID,CN/PREFLIGHT_PROJECT_ID
            PFLT_PYXIS_API_TOKEN,CN/PREFLIGHT_RHEL_API_KEY

      - name: Removing Published Docker Images
        if: always() && !contains(needs.build_docker_image.result, 'skipped')
        run: |
          auth_token=$(curl --fail -L -s -X POST 'https://hub.docker.com/v2/users/login' \
          -H 'Content-Type: application/json' \
          --data-raw '{
            "username": "${{ env.DOCKERHUB_USERNAME }}",
            "password": "${{ env.DOCKERHUB_PASSWORD }}"
          }'| jq -r '.token')
          
           curl "https://hub.docker.com/v2/repositories/${{ env.OPERATOR_REGISTRY_IMAGE }}/tags/${{ env.RELEASE_VERSION }}/" -X DELETE -H "Authorization: JWT ${auth_token}"
           curl "https://hub.docker.com/v2/repositories/${{ env.OPERATOR_REGISTRY_IMAGE }}/tags/latest/" -X DELETE -H "Authorization: JWT ${auth_token}"
           curl "https://hub.docker.com/v2/repositories/${{ env.AGENT_REGISTRY_IMAGE }}/tags/${{ env.RELEASE_VERSION }}/" -X DELETE -H "Authorization: JWT ${auth_token}"
           curl "https://hub.docker.com/v2/repositories/${{ env.AGENT_REGISTRY_IMAGE }}/tags/latest/" -X DELETE -H "Authorization: JWT ${auth_token}"

      - name: Login to Docker Hub
        if: always() && !contains(needs.build_docker_image.result, 'skipped')
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}

      - name: Making Previous Docker Image Tag As 'latest'
        if: always() && !contains(needs.build_docker_image.result, 'skipped')
        run: |
          docker pull docker.io/${{ env.OPERATOR_REGISTRY_IMAGE }}:${{ needs.build_docker_image.outputs.CURRENT_OPERATOR_LATEST_TAG }}
          docker pull docker.io/${{ env.AGENT_REGISTRY_IMAGE }}:${{ needs.build_docker_image.outputs.CURRENT_AGENT_LATEST_TAG }}
          
          make docker-push-latest IMG="docker.io/${{ env.OPERATOR_REGISTRY_IMAGE }}:${{ needs.build_docker_image.outputs.CURRENT_OPERATOR_LATEST_TAG }}"
          make docker-push-agent-latest IMG="docker.io/${{ env.AGENT_REGISTRY_IMAGE }}:${{ needs.build_docker_image.outputs.CURRENT_AGENT_LATEST_TAG }}"

      - name: Delete Published and Certified Opehshift Image
        if: always() && !contains(needs.publish_image_to_redhat.result, 'skipped')
        run: |
          source .github/scripts/utils.sh
          delete_container_image "${{ env.PREFLIGHT_PROJECT_ID }}" "${RELEASE_VERSION}" "${{ env.PFLT_PYXIS_API_TOKEN }}" "5"
          sync_certificated_image_tags "${{ env.PREFLIGHT_PROJECT_ID }}" "${{ needs.build_docker_image.outputs.CURRENT_OPERATOR_LATEST_TAG }}" "${{ env.PFLT_PYXIS_API_TOKEN }}"

      - name: Close PR's in 'certified-operators, community-operators' Repo's
        if: always() && !contains(needs.operator_bundle_release.result, 'skipped')
        run: |
          BUNDLE_RELEASE_VERSION=$( make print-bundle-version VERSION=${RELEASE_VERSION} )
          echo ${{ env.DEVOPS_GITHUB_TOKEN }} | gh auth login --with-token
          for REPO in "redhat-openshift-ecosystem/certified-operators" "k8s-operatorhub/community-operators"; do   
            PR_NUMBER=$(gh pr list --repo $REPO --search "operator ${{ env.OPERATOR_NAME }} (${BUNDLE_RELEASE_VERSION})" --json number | jq -r '.[].number')
            gh pr close $PR_NUMBER --repo $REPO --delete-branch 2>/dev/null
          done

      - name: Close PR in 'hazelcast-platform-operator' Repo
        if: always() && !contains(needs.helm_chart_release.result, 'skipped')
        run: |
          echo ${{ env.DEVOPS_GITHUB_TOKEN }} | gh auth login --with-token
          REPLACED_VERSION=$(echo "$RELEASE_VERSION" | awk -F'.' '{print $1"."$2+1".0"}')
          HELM_CHART_PR_NUMBER=$(gh pr list --repo hazelcast/hazelcast-platform-operator --search "Update Helm Chart Version to ${REPLACED_VERSION}-snapshot" --json number | jq -r '.[].number')
          gh pr close $HELM_CHART_PR_NUMBER --repo hazelcast/hazelcast-platform-operator --delete-branch 2>/dev/null

      - name: Removing Release Notes and Tag in 'Hazelcast Operator' Repo
        if: always()
        run: |
          echo ${{ env.DEVOPS_GITHUB_TOKEN }} | gh auth login --with-token
          gh release delete v${RELEASE_VERSION} --cleanup-tag --yes

      - name: Download a Backup of the Helm Chart Index
        if: always() && !contains(needs.helm_chart_release.result, 'skipped')
        uses: actions/download-artifact@v3
        with:
          name: index.yaml

      - name: Restore the Helm Chart Index
        if: always() && !contains(needs.helm_chart_release.result, 'skipped')
        run: |
          aws s3 rm s3://hazelcast-charts/hazelcast-platform-operator-${RELEASE_VERSION}.tgz
          aws s3 rm s3://hazelcast-charts/hazelcast-platform-operator-crds-${RELEASE_VERSION}.tgz
          aws s3 cp $GITHUB_WORKSPACE/index.yaml s3://hazelcast-charts

  slack_notify:
    name: Slack Notify
    needs: ['publish_images', 'publish_image_to_redhat', 'operator_bundle_release', 'helm_chart_release', 'validate_release', 'merge_pr']
    if: needs.publish_images.result != 'success' && needs.publish_image_to_redhat.result != 'success' && needs.operator_bundle_release.result != 'success'  && needs.helm_chart_release.result != 'success'
    runs-on: ubicloud-standard-2
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            SLACK_WEBHOOK_URL,CN/SLACK_WEBHOOK_URL

      - uses: 8398a7/action-slack@v3
        with:
          fields: repo,commit,author,action,eventName,workflow
          status: failure
          channel: "#github-actions-log"
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
