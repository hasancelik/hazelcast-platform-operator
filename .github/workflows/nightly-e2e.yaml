name: Nightly E2E tests
on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * *"

jobs:
  gke-e2e-tests:
    name: Run e2e tests at GKE
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        edition: [ 'os', 'ee' ]
    env:
      GCP_PROJECT_ID: hazelcast-33
      GCP_NETWORK: operator-test-network
      GKE_ZONE: europe-west1-b
      KUBECTL_VERSION: 1.22.0
      IMG: eu.gcr.io/hazelcast-33/hazelcast-platform-operator:${GITHUB_SHA::8}-${GITHUB_RUN_NUMBER}
      NAMESPACE: test-operator-nightly-${{ matrix.edition }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Golang
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'

      - name: Cache Golang dependencies
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install kubectl
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/bin
          echo "${GITHUB_WORKSPACE}/bin" >> ${GITHUB_PATH}
          curl -L https://dl.k8s.io/release/v${{ env.KUBECTL_VERSION }}/bin/linux/amd64/kubectl -o ${GITHUB_WORKSPACE}/bin/kubectl && chmod +x ${GITHUB_WORKSPACE}/bin/kubectl

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          export_default_credentials: true

      - name: Create GKE cluster
        run: |-
          CLUSTER_NAME="operator-e2e-test-${{ matrix.edition }}-${GITHUB_SHA::8}-${GITHUB_RUN_NUMBER}"
          echo "CLUSTER_NAME=${CLUSTER_NAME}" >> $GITHUB_ENV
          gcloud container clusters create ${CLUSTER_NAME} --zone=${{ env.GKE_ZONE }} --project=${{ env.GCP_PROJECT_ID }} --network=${{ env.GCP_NETWORK }} --machine-type=n1-standard-2 --num-nodes=2
          sleep 30

      - name: Connect to the GKE cluster
        run: gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --zone ${{ env.GKE_ZONE }} --project ${{ env.GCP_PROJECT_ID }}

      - name: Login to GCR
        run: gcloud auth configure-docker -q

      - name: Build Operator Image and Push to GCR
        run: |
          make docker-build-ci IMG=${{ env.IMG }}
          make docker-push IMG=${{ env.IMG }}

      - name: Deploy Operator to GKE
        run: |
          kubectl create namespace ${{ env.NAMESPACE }}
          make install
          make deploy NAMESPACE=${{ env.NAMESPACE }} IMG=${{ env.IMG }}

      - name: Create secret
        if: matrix.edition == 'ee'
        run: kubectl create secret generic hazelcast-license-key --namespace ${{ env.NAMESPACE }} --from-literal=license-key=${{ secrets.HZ_LICENSE_KEY }}

      - name: Run Hazelcast E2E tests at GKE
        run: |
          case ${{ matrix.edition }} in
            os) GO_TEST_FLAGS=-ee=false;;
            ee) GO_TEST_FLAGS=-ee=true;;
            *)  echo Unexpected edition: ${{ matrix.edition }} && exit 1;;
          esac
          make test-e2e GO_TEST_FLAGS=${GO_TEST_FLAGS} NAMESPACE=${{ env.NAMESPACE }}

      # Clean up
      - name: Delete GKE cluster
        if: ${{ always() }}
        run: |-
          gcloud container clusters delete ${{ env.CLUSTER_NAME }} --zone ${{ env.GKE_ZONE }} --quiet

  ocp-e2e-tests:
    name: Run e2e tests at OCP
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        edition: [ 'os', 'ee' ]
    env:
      OCP_CLUSTER_URL: ${{ secrets.OCP_CLUSTER_URL }}
      OCP_USERNAME: ${{ secrets.OCP_USERNAME }}
      OCP_PASSWORD: ${{ secrets.OCP_PASSWORD }}
      SCAN_REGISTRY: "scan.connect.redhat.com"
      RHEL_REPO_PASSWORD: ${{ secrets.RHEL_REPO_PASSWORD }}
      HZ_LICENSE_KEY: ${{ secrets.HZ_LICENSE_KEY }}
      RHEL_IMAGE: hazelcast/hazelcast-platform-operator:5-preview-snapshot

    steps:
      - name: Set Release Version
        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV

      - name: Checkout to hazelcast-operator
        uses: actions/checkout@v2

      - name: Set up Golang
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'

      - name: Cache Golang dependencies
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Deploy Hazelcast-Platform-Operator to OCP
        run: |
          NAMESPACE=oc-e2e-test-operator-nightly-${{ matrix.edition }}-${{ github.run_id }}
          echo "NAMESPACE=${NAMESPACE}" >> $GITHUB_ENV
          oc login ${OCP_CLUSTER_URL} -u=${OCP_USERNAME} -p=${OCP_PASSWORD} --insecure-skip-tls-verify
          oc new-project $NAMESPACE
          oc create secret docker-registry pull-secret \
          --docker-server=$SCAN_REGISTRY \
          --docker-username=unused \
          --docker-password=$RHEL_REPO_PASSWORD \
          --docker-email=unused
          cat <<EOF | oc apply -f -
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: hazelcast-platform-controller-manager
            namespace: $NAMESPACE
          EOF

          oc secrets link hazelcast-platform-controller-manager pull-secret --for=pull
          make deploy IMG=$RHEL_IMAGE NAMESPACE=$NAMESPACE
          oc rollout status deployment hazelcast-platform-controller-manager

      - name: Create secret
        if: matrix.edition == 'ee'
        run: oc create secret generic hazelcast-license-key --from-literal=license-key=${HZ_LICENSE_KEY}

      - name: Run Hazelcast E2E tests at OCP
        id: e2e-test
        run: |
          case ${{ matrix.edition }} in
            os) GO_TEST_FLAGS=-ee=false;;
            ee) GO_TEST_FLAGS=-ee=true;;
            *)  echo Unexpected edition: ${{ matrix.edition }} && exit 1;;
          esac
          make test-e2e GO_TEST_FLAGS=${GO_TEST_FLAGS} NAMESPACE=$NAMESPACE
          echo "RUNNING TESTS in $NAMESPACE"

      - name: Clean up after Tests
        if: ${{ always() || failure() }}
        run: |
          make undeploy

          oc delete secret pull-secret --wait=false
          oc delete project $NAMESPACE --wait=false
          if [[ matrix.edition == 'ee' ]]; then
            oc delete secret hazelcast-license-key --wait=false
          fi