name: ARM Image Test

on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * *"

env:
  GO_VERSION: '1.22.5'
  NR_OF_SUITES: 10
  GOBIN: ${{ github.workspace }}/bin
  GAR_REGION: us-east1
  GAR_PROJECT: hazelcast-33
  GAR_REPO: hazelcast-platform-operator
  AWS_REGION: us-east-1

jobs:
  get-image:
    name: Get Image
    runs-on: ubicloud-standard-2-arm
    outputs:
      OPERATOR_IMG: ${{ steps.get-operator-image-tag.outputs.OPERATOR_IMG }}
      AGENT_IMG: ${{ steps.get-agent-image-tag.outputs.AGENT_IMG }}
      AGENT_REPO: ${{ steps.get-agent-image-tag.outputs.AGENT_REPO }}
      AGENT_VERSION: ${{ steps.get-agent-image-tag.outputs.AGENT_VERSION }}
    steps:
      - uses: actions/checkout@v4

      - name: Set Up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.6.1
        with:
          install: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            GKE_SA_KEY,CN/GKE_SA_KEY

      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: us-east1-docker.pkg.dev
          username: _json_key
          password: ${{ env.GKE_SA_KEY }}

      - name: Generate Operator Image Name
        id: get-operator-image-tag
        run: |
          echo "OPERATOR_IMG=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/$(uuidgen)-operator:5d" >> $GITHUB_OUTPUT

      - name: Generate Agent Image Name
        id: get-agent-image-tag
        run: |
          AGENT_REPO="${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/$(uuidgen)-agent"
          AGENT_VERSION="5d"
          echo "AGENT_REPO=$AGENT_REPO" >> $GITHUB_OUTPUT
          echo "AGENT_VERSION=$AGENT_VERSION" >> $GITHUB_OUTPUT
          echo "AGENT_IMG=$AGENT_REPO:$AGENT_VERSION" >> $GITHUB_OUTPUT

      - name: Build Operator Image
        uses: docker/build-push-action@v6.7.0
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            version=${{github.sha}}
            pardotID=dockerhub
          file: Dockerfile
          push: true
          tags: ${{ steps.get-operator-image-tag.outputs.OPERATOR_IMG }}
          cache-from: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/${{ hashFiles('Dockerfile','main.go','api/**','controllers/**','internal/**','licenses/**','**/go.mod','**/go.sum') }}:14d
          cache-to: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/${{ hashFiles('Dockerfile','main.go','api/**','controllers/**','internal/**','licenses/**','**/go.mod','**/go.sum') }}:14d
          platforms: linux/arm64
          labels: |
            operator.image.revision=${{ github.sha }}

      - name: Build Agent Image
        uses: docker/build-push-action@v6.7.0
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: agent/Dockerfile
          push: true
          tags: ${{ steps.get-agent-image-tag.outputs.AGENT_IMG }}
          cache-from: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/${{ hashFiles('agent/Dockerfile','agent/main.go','agent/internal/**','agent/init/**','agent/sidecars/**') }}:14d
          cache-to: type=registry,ref=${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT }}/${{ env.GAR_REPO }}/${{ hashFiles('agent/Dockerfile','agent/main.go','agent/internal/**','agent/init/**','agent/sidecars/**') }}:14d
          platforms: linux/arm64
          labels: |
            agent.image.revision=${{ github.sha }}

  kind-e2e-tests:
    name: Run E2E tests
    runs-on: ubicloud-standard-2-arm
    needs: [get-image]
    strategy:
      fail-fast: false
      matrix:
        node_number:
          ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10"]
    env:
      NAMESPACE: kind-test-operator
      RELEASE_NAME: hp-${{ github.run_id }}
      CLUSTER_NAME: kind
      OPERATOR_IMG: ${{ needs.get-image.outputs.OPERATOR_IMG }}
      AGENT_IMG: ${{ needs.get-image.outputs.AGENT_IMG }}
      AGENT_REPO: ${{ needs.get-image.outputs.AGENT_REPO }}
      AGENT_VERSION: ${{ needs.get-image.outputs.AGENT_VERSION }}
      STORAGE_CLASS: standard
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Create Kind Config
        run: |
          cat <<EOT >> ./kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
          - role: worker
          - role: worker
          - role: worker
          EOT

      - name: Create Kind Cluster
        uses: helm/kind-action@v1.10.0
        with:
          config: ./kind-config.yaml
          cluster_name: ${{ env.CLUSTER_NAME }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            GKE_SA_KEY,CN/GKE_SA_KEY
            GRAFANA_REMOTE_WRITE_URL,CN/GRAFANA_REMOTE_WRITE_URL
            GRAFANA_PROM_REMOTE_WRITE_URL,CN/GRAFANA_PROM_REMOTE_WRITE_URL
            GRAFANA_PROM_USERNAME,CN/GRAFANA_PROM_USERNAME
            GRAFANA_PROM_PASSWORD,CN/GRAFANA_PROM_PASSWORD
            LOKI_USERNAME,CN/GRAFANA_LOKI_USERNAME
            LOKI_PASSWORD,CN/GRAFANA_LOKI_PASSWORD
            HZ_LICENSE_KEY,CN/HZ_LICENSE_KEY
            AZURE_STORAGE_KEY,CN/AZURE_STORAGE_KEY

      - name: Install metallb
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_on: error
          command: |
            kubectl create namespace ${NAMESPACE}
            kubectl config set-context --current --namespace=$NAMESPACE
            kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.14.5/config/manifests/metallb-native.yaml
            kubectl wait --for=condition=ready --timeout=60s -n metallb-system pod -l app=metallb
            HOST_MIN=$(docker network inspect -f '{{json .IPAM.Config}}' ${{ env.CLUSTER_NAME }} | jq -r '.[1].Subnet' |  sed  -n 's/.0.0.16/.255.200/p')
            HOST_MAX=$(docker network inspect -f '{{json .IPAM.Config}}' ${{ env.CLUSTER_NAME }} | jq -r '.[1].Subnet' |  sed  -n 's/.0.0.16/.255.250/p')
            IP_RANGE=$HOST_MIN-$HOST_MAX

            cat <<EOF | kubectl apply -f -
            apiVersion: metallb.io/v1beta1
            kind: IPAddressPool
            metadata:
              name: kind-pool
              namespace: metallb-system
            spec:
              addresses:
              - $IP_RANGE
            ---
            apiVersion: metallb.io/v1beta1
            kind: L2Advertisement
            metadata:
              name: l2
              namespace: metallb-system
            spec:
              ipAddressPools:
              - kind-pool
            EOF

      - name: Create Secrets
        run: |
          kubectl create secret generic hazelcast-license-key \
             --namespace ${{ env.NAMESPACE }} \
             --from-literal=license-key=${{ env.HZ_LICENSE_KEY }}

          kubectl create secret generic br-secret-s3 \
            --namespace ${{ env.NAMESPACE }} \
            --from-literal=region=us-east-1 \
            --from-literal=access-key-id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=secret-access-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}

          kubectl create secret generic br-secret-az \
            --namespace ${{ env.NAMESPACE }} \
            --from-literal=storage-account=operatortest \
            --from-literal=storage-key=${{ env.AZURE_STORAGE_KEY }}

          kubectl create secret generic br-secret-gcp \
          --namespace ${{ env.NAMESPACE }} \
          --from-literal=google-credentials-path='${{ env.GKE_SA_KEY }}'

      - name: Authenticate to GAR
        uses: docker/login-action@v3
        with:
          registry: us-east1-docker.pkg.dev
          username: _json_key
          password: ${{ env.GKE_SA_KEY }}

      - name: Load Operator Image
        run: |
          docker pull $OPERATOR_IMG
          kind load docker-image $OPERATOR_IMG --name ${{ env.CLUSTER_NAME }}

      - name: Load Agent Image
        run: |
          docker pull $AGENT_IMG
          kind load docker-image $AGENT_IMG --name ${{ env.CLUSTER_NAME }}

      - name: Deploy Operator to Kind Cluster
        run: |
          DEPLOY_NAME=${RELEASE_NAME}-hazelcast-platform-operator
          make deploy IMG=$OPERATOR_IMG NAMESPACE=$NAMESPACE RELEASE_NAME=$RELEASE_NAME
          kubectl rollout status deployment $DEPLOY_NAME

      - name: Run Tests
        id: e2e-test
        run: |
          make test-e2e-split-kind NAMESPACE=${NAMESPACE} RELEASE_NAME=${RELEASE_NAME} SHARD_ID="${{ matrix.node_number }}" AGENT_REPO=$AGENT_REPO AGENT_VERSION=$AGENT_VERSION STORAGE_CLASS=$STORAGE_CLASS